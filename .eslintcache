[{"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\index.tsx":"1","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\reportWebVitals.ts":"2","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\App.tsx":"3","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\navigationlinks.ts":"4","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\LoginScreen\\index.tsx":"5","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\ModifyExistingProjectScreen\\index.tsx":"6","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\OverviewScreen\\index.tsx":"7","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\ProjectOverviewParticipantScreen\\index.tsx":"8","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\CreateNewProjectScreen\\index.tsx":"9","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\GenericTestScreen\\index.tsx":"10","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\store.ts":"11","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\configuration.ts":"12","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\login.ts":"13","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\index.ts":"14","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\login.ts":"15","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\api.ts":"16","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\login.ts":"17","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\base.ts":"18","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\getTests.ts":"19","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\getTests.ts":"20","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\getTests.ts":"21","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\getProjectsOfParticipant.ts":"22","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\getProjectsOfParticipant.ts":"23","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\getProjectsOfParticipant.ts":"24","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\ProjectsOverviewParticipantScreen\\index.tsx":"25","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\getTestsOfProjectParticipant.ts":"26","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\getTestsOfProjectParticipant.ts":"27","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\getTestsOfProjectParticipant.ts":"28","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\allTestsOfProjectParticipant.ts":"29","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\allTestsForResearcher.ts":"30","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\AllProjectsForParticipant.ts":"31","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\allProjectsForParticipant.ts":"32","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\dataForTestToPerform.ts":"33","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\dataForTestToPerform.ts":"34","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\dataForTestToPerform.ts":"35","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\testToPerform.ts":"36"},{"size":672,"mtime":1612090419819,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":499162500000,"results":"39","hashOfConfig":"38"},{"size":2254,"mtime":1613827254220,"results":"40","hashOfConfig":"38"},{"size":372,"mtime":1611405574565,"results":"41","hashOfConfig":"38"},{"size":2467,"mtime":1612705890032,"results":"42","hashOfConfig":"38"},{"size":126,"mtime":1612691271757,"results":"43","hashOfConfig":"38"},{"size":2924,"mtime":1613849264639,"results":"44","hashOfConfig":"38"},{"size":2305,"mtime":1613851833000,"results":"45","hashOfConfig":"38"},{"size":8199,"mtime":1613321968806,"results":"46","hashOfConfig":"38"},{"size":106,"mtime":1612691080340,"results":"47","hashOfConfig":"38"},{"size":1162,"mtime":1613850812883,"results":"48","hashOfConfig":"38"},{"size":3287,"mtime":1612705354407,"results":"49","hashOfConfig":"38"},{"size":724,"mtime":1612690856655,"results":"50","hashOfConfig":"38"},{"size":435,"mtime":1612705354345,"results":"51","hashOfConfig":"38"},{"size":259,"mtime":1612690591319,"results":"52","hashOfConfig":"38"},{"size":74296,"mtime":1612705354401,"results":"53","hashOfConfig":"38"},{"size":192,"mtime":1612086849068,"results":"54","hashOfConfig":"38"},{"size":1594,"mtime":1612705354371,"results":"55","hashOfConfig":"38"},{"size":188,"mtime":1612699232279,"results":"56","hashOfConfig":"38"},{"size":310,"mtime":1613298049808,"results":"57","hashOfConfig":"38"},{"size":388,"mtime":1613298049808,"results":"58","hashOfConfig":"38"},{"size":523,"mtime":1613826134153,"results":"59","hashOfConfig":"38"},{"size":389,"mtime":1613825725422,"results":"60","hashOfConfig":"38"},{"size":290,"mtime":1613826511062,"results":"61","hashOfConfig":"38"},{"size":2121,"mtime":1613829269119,"results":"62","hashOfConfig":"38"},{"size":583,"mtime":1613828760080,"results":"63","hashOfConfig":"38"},{"size":584,"mtime":1613851833000,"results":"64","hashOfConfig":"38"},{"size":324,"mtime":1613828870497,"results":"65","hashOfConfig":"38"},{"size":825,"mtime":1613829607774,"results":"66","hashOfConfig":"38"},{"size":356,"mtime":1613848969091,"results":"67","hashOfConfig":"38"},{"size":398,"mtime":1613849260750,"results":"68","hashOfConfig":"38"},{"size":398,"mtime":1613849260750,"results":"69","hashOfConfig":"38"},{"size":565,"mtime":1613850806335,"results":"70","hashOfConfig":"38"},{"size":604,"mtime":1613850717099,"results":"71","hashOfConfig":"38"},{"size":231,"mtime":1613850629679,"results":"72","hashOfConfig":"38"},{"size":1209,"mtime":1613851590513,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1c61zi6",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\index.tsx",[],["149","150"],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\reportWebVitals.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\App.tsx",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\navigationlinks.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\LoginScreen\\index.tsx",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\ModifyExistingProjectScreen\\index.tsx",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\OverviewScreen\\index.tsx",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\ProjectOverviewParticipantScreen\\index.tsx",["151"],"import { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { api } from '../../App';\r\nimport { GenericTest } from '../../services/api';\r\nimport { testToPerformAction } from '../../services/redux/actions/dataForTestToPerform';\r\nimport { AppState } from '../../services/redux/store';\r\nimport { ETestType, TestOfProjectOfParticipant } from '../../services/redux/types/getTestsOfProjectParticipant';\r\nimport { TransformTestToPerformData } from '../../services/viewmodels/testToPerform';\r\nimport nl from '../navigationlinks';\r\n\r\ninterface ParamTypes {\r\n    projectUuid: string\r\n  }\r\n\r\nexport default function ProjectOverviewParticipantScreen(){    \r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const loginData = useSelector((state: AppState) => state.login)\r\n    const testsOfProject = useSelector((state: AppState) => state.testsOfProjectOfParticipant)\r\n\r\n    const { projectUuid } = useParams<ParamTypes>();\r\n    const goToTestClick = (test: TestOfProjectOfParticipant) => {\r\n        (async () => {\r\n            if(!loginData.isValid){\r\n                return;\r\n            }\r\n\r\n            const dataForTest = await api.getGenericTestOfProject(projectUuid, test.testId)\r\n            .catch(e => {\r\n                console.log(e)\r\n                return e\r\n              })\r\n\r\n              if(dataForTest.status != 200){\r\n                  return;\r\n              }\r\n\r\n            if(test.testType === ETestType.Generic){\r\n                dispatch(\r\n                    testToPerformAction(TransformTestToPerformData(dataForTest.data as GenericTest))\r\n                );\r\n                history.push(nl.projectOverviewParticipantScreen + \"/\" + projectUuid + nl.genericTestScreen + \"/\" + test.testId);\r\n            }\r\n        })();\r\n    }\r\n\r\n    if(!loginData.isValid){\r\n        return (\r\n            <h1>Unauthorized</h1>\r\n        );\r\n    }\r\n\r\n    if(testsOfProject.tests.length === 0){\r\n        return (\r\n            <h1>No tests found</h1>\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        <ul>\r\n            {\r\n                testsOfProject.tests.map( t =>\r\n                    <div><button onClick={() => goToTestClick(t)}>{t.testName}</button></div>\r\n                )\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\CreateNewProjectScreen\\index.tsx",["152"],"import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { api } from \"../../App\";\r\nimport { AccountDetailsAccountTypeEnum, CreateProject } from \"../../services/api\";\r\nimport { getTestsAction } from \"../../services/redux/actions/getTests\";\r\nimport { AppState } from \"../../services/redux/store\";\r\nimport { TestForAccount } from \"../../services/redux/types/getTests\";\r\nimport nl from \"../navigationlinks\";\r\n\r\ninterface IProjectTitle{\r\n    projectTitle: string\r\n  }\r\n\r\ninterface INewParticipant{\r\n  firstName: string,\r\n  lastName: string,\r\n  emailAddress: string,\r\n  isCorrect: Boolean\r\n}\r\n\r\nexport default function CreateNewProjectScreen(){\r\n    const loginData = useSelector((state: AppState) => state.login)\r\n    const allTests = useSelector((state: AppState) => state.getTests)\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const {register, handleSubmit, errors, reset} = useForm<IProjectTitle>();\r\n    const [hasTestsSeleted, setTestsSelected] = useState<Boolean>(true);\r\n    \r\n    const blankParticipant: INewParticipant = {\r\n        firstName: '',\r\n        lastName: '',\r\n        emailAddress: '',\r\n        isCorrect: true,\r\n    }\r\n    const [participantState, setParticipant] = useState<INewParticipant[]>([\r\n        {...blankParticipant}\r\n    ]);\r\n\r\n    const checkboxChange = (test: TestForAccount) => {\r\n      let testIndex = allTests.backendSavedTests.map(t => t.testId).indexOf(test.testId)\r\n\r\n      if(testIndex === -1){\r\n        return;\r\n      }\r\n      allTests.backendSavedTests[testIndex].isChecked = !test.isChecked\r\n      dispatch(getTestsAction(allTests)) \r\n    }\r\n\r\n    const addParticipant = () => {\r\n        setParticipant([...participantState, {...blankParticipant}]);\r\n      };\r\n\r\n    const participantFirstNameUpdated = (index: number, firstName: string) => {\r\n        participantState[index].firstName = firstName;\r\n        setParticipant(participantState)\r\n      };\r\n\r\n    const participantLastNameUpdated = (index: number, lastName: string) => {\r\n        participantState[index].lastName = lastName;\r\n        setParticipant(participantState)\r\n      };\r\n\r\n    const participantEmailAddressUpdated = (index: number, emailAddress: string) => {\r\n        participantState[index].emailAddress = emailAddress;\r\n        setParticipant(participantState)\r\n      };\r\n\r\n    const isNotAuthorized = !loginData.isValid || loginData.accountDetails.accountType !== AccountDetailsAccountTypeEnum.Researcher\r\n\r\n    const onSubmit = (data: IProjectTitle) => {\r\n        if(isNotAuthorized){\r\n            return;\r\n        }\r\n\r\n        let selectedTests = allTests.backendSavedTests.filter(test => test.isChecked)\r\n\r\n        if(selectedTests.length === 0){\r\n          setTestsSelected(false)\r\n          return;\r\n        }\r\n        setTestsSelected(true)\r\n\r\n        if(incorrectParticipants(participantState).length > 0){\r\n          setParticipant(participantState)\r\n          return;\r\n        } \r\n\r\n        setParticipant(participantState)\r\n\r\n        const createProject: CreateProject = {\r\n          projectTitle: data.projectTitle,\r\n          participants: participantState.filter(p => p.emailAddress),\r\n          tests: selectedTests.map(s => s.testId)\r\n        };\r\n\r\n        (async () => {\r\n    \r\n          const projectData = await api.createsNewProject(loginData.accountDetails.accountID, createProject)\r\n            .catch(e => {\r\n              console.log(e)\r\n              return e\r\n            })\r\n    \r\n          if(projectData.status !== 200){\r\n            return;\r\n          }\r\n    \r\n          history.push(nl.overviewScreen);      \r\n          reset();\r\n        })();\r\n        \r\n    }\r\n    \r\n\r\n    if(isNotAuthorized){\r\n        return(\r\n            <h1>Unauthorized</h1>\r\n        );    \r\n    }\r\n\r\n    if(allTests.backendSavedTests.length === 0){\r\n        return(\r\n            <h1>Uh oh, something went wrong</h1>\r\n        );\r\n    } else {\r\n        return(\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <div>\r\n                <label>Project title:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"projectTitle\"\r\n                  name=\"projectTitle\"\r\n                  ref={register({required: true})}\r\n                />\r\n                {errors.projectTitle && errors.projectTitle.type === \"required\" && (\r\n                <div className=\"error\">You must enter the title of the project.</div>)}\r\n              </div>\r\n              <div>\r\n                <input type=\"button\" value=\"Add Participant\" onClick={addParticipant} />      \r\n                {\r\n                  /// I Need to update the participants\r\n                    participantState.map((participant, index) => {\r\n                    return (\r\n                        <div key={`participant-${index}`}>\r\n                        <label>first name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name={participant.firstName}\r\n                            data-idx={participant.firstName}\r\n                            id={participant.firstName}\r\n                            className=\"firstname\"\r\n                            onChange={(e) => participantFirstNameUpdated(index, e.target.value )}\r\n                        />\r\n                        <label>Last name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name={participant.lastName}\r\n                            data-idx={participant.lastName}\r\n                            id={participant.lastName}\r\n                            className=\"lastname\"\r\n                            onChange={(e) => participantLastNameUpdated(index, e.target.value )}\r\n                        />\r\n                        <label>email address</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name={participant.emailAddress}\r\n                            data-idx={participant.emailAddress}\r\n                            id={participant.emailAddress}\r\n                            className=\"emailAddress\"\r\n                            onChange={(e) => participantEmailAddressUpdated(index, e.target.value )}\r\n                        />\r\n                        {participant.isCorrect ? null : <label>Participant is incorrect</label>}                        \r\n                        </div>\r\n                    );      \r\n                    })\r\n                }\r\n              </div>\r\n              <div>\r\n                  {allTests.backendSavedTests.map(test => \r\n                  <label>{test.testName} \r\n                    <input \r\n                      type=\"checkbox\" \r\n                      name={test.testName} \r\n                      onChange={() => checkboxChange(test)}\r\n                      key={test.testId}/>\r\n                  </label>)}\r\n                  {hasTestsSeleted ? null : <label>Select at least one test</label>}                      \r\n              </div>\r\n              <button type=\"submit\">Submit</button>\r\n            </form>\r\n          );\r\n    }\r\n}\r\n\r\n\r\nfunction incorrectParticipants(participants: INewParticipant[]): number[] {\r\n  participants.forEach(p =>{\r\n    p.isCorrect = !(!completeRowIsEmpty(p) && !completeRowCorrect(p))\r\n  })\r\n\r\n  return participants.map((p, index) => !p.isCorrect ? index : -1).filter(p => p > -1)\r\n}\r\n\r\nfunction completeRowIsEmpty(p: INewParticipant): Boolean {\r\n  return p.emailAddress?.trim().length === 0 &&\r\n   p.firstName?.trim().length === 0 &&\r\n   p.lastName?.trim().length === 0\r\n}\r\n\r\nfunction completeRowCorrect(p: INewParticipant): Boolean {\r\n  \r\n  let isValidFirstName = p.firstName.trim().length !== 0 && !/[^a-zA-Z]/.test(p.firstName)\r\n  let isValidLastName = p.lastName.trim().length !== 0  && !/[^a-zA-Z]/.test(p.lastName)\r\n  let isValidEmailAddress = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,253}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,253}[a-zA-Z0-9])?)*$\").test(p.emailAddress)\r\n  return isValidFirstName && isValidLastName && isValidEmailAddress\r\n}\r\n\r\n","C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\GenericTestScreen\\index.tsx",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\store.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\configuration.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\login.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\index.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\login.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\api.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\login.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\api\\base.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\getTests.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\getTests.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\getTests.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\getProjectsOfParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\getProjectsOfParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\getProjectsOfParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\views\\ProjectsOverviewParticipantScreen\\index.tsx",["153"],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\getTestsOfProjectParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\getTestsOfProjectParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\getTestsOfProjectParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\allTestsOfProjectParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\allTestsForResearcher.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\AllProjectsForParticipant.ts",["154"],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\allProjectsForParticipant.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\reducers\\dataForTestToPerform.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\types\\dataForTestToPerform.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\redux\\actions\\dataForTestToPerform.ts",[],"C:\\Users\\markw\\Documents\\eutychia\\dev\\eutychia-webapp\\src\\services\\viewmodels\\testToPerform.ts",["155"],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":34,"column":37,"nodeType":"162","messageId":"163","endLine":34,"endColumn":39},{"ruleId":"164","severity":1,"message":"165","line":217,"column":124,"nodeType":"166","messageId":"167","endLine":217,"endColumn":125,"suggestions":"168"},{"ruleId":"160","severity":1,"message":"161","line":25,"column":38,"nodeType":"162","messageId":"163","endLine":25,"endColumn":40},{"ruleId":"169","severity":1,"message":"170","line":2,"column":36,"nodeType":"171","messageId":"172","endLine":2,"endColumn":56},{"ruleId":"173","severity":1,"message":"174","line":11,"column":19,"nodeType":"175","messageId":"176","endLine":15,"endColumn":14},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["179","180"],"@typescript-eslint/no-unused-vars","'ProjectOfParticipant' is defined but never used.","Identifier","unusedVar","@typescript-eslint/consistent-type-assertions","Use 'as QuestionsOfTest' instead of '<QuestionsOfTest>'.","TSTypeAssertion","as","no-global-assign","no-unsafe-negation",{"messageId":"181","fix":"182","desc":"183"},{"messageId":"184","fix":"185","desc":"186"},"removeEscape",{"range":"187","text":"188"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"189","text":"190"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[8049,8050],"",[8049,8049],"\\"]