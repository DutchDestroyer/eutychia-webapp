/* tslint:disable */
/* eslint-disable */
/**
 * Test api for project
 * This api is a test version to connect the backend and frontend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * the schema to create the new account
 * @export
 * @interface AccountCreation
 */
export interface AccountCreation {
    /**
     * first name of the new user
     * @type {string}
     * @memberof AccountCreation
     */
    firstName: string;
    /**
     * last name of the new user
     * @type {string}
     * @memberof AccountCreation
     */
    lastName: string;
    /**
     * the id of the account that invited the new user
     * @type {string}
     * @memberof AccountCreation
     */
    senderAccountID: string;
    /**
     * 
     * @type {string}
     * @memberof AccountCreation
     */
    emailAddress: string;
}
/**
 * the account details provided when the user logs in as a JWT token
 * @export
 * @interface AccountDetails
 */
export interface AccountDetails {
    /**
     * The account id.
     * @type {string}
     * @memberof AccountDetails
     */
    accountID: string;
    /**
     * The access token.
     * @type {string}
     * @memberof AccountDetails
     */
    accessToken: string;
    /**
     * The refresh token.
     * @type {string}
     * @memberof AccountDetails
     */
    refreshToken: string;
}
/**
 * the answer to a question
 * @export
 * @interface AnswerToQuestion
 */
export interface AnswerToQuestion {
    /**
     * the question number
     * @type {number}
     * @memberof AnswerToQuestion
     */
    question?: number;
    /**
     * an answer to a question
     * @type {string}
     * @memberof AnswerToQuestion
     */
    answer?: string;
    /**
     * the time in milliseconds to answer the question
     * @type {number}
     * @memberof AnswerToQuestion
     */
    timeToAnswer?: number;
}
/**
 * schema of a generic test
 * @export
 * @interface GenericTest
 */
export interface GenericTest {
    /**
     * Title of questionnaire
     * @type {string}
     * @memberof GenericTest
     */
    title: string;
    /**
     * Description of questionnaire
     * @type {string}
     * @memberof GenericTest
     */
    description: string;
    /**
     * To determine whether the answers should be displayed at the end of the questionnaire
     * @type {boolean}
     * @memberof GenericTest
     */
    displayAnswers: boolean;
    /**
     * Final remakrs at the end of the questionnaire
     * @type {string}
     * @memberof GenericTest
     */
    finalRemark: string;
    /**
     * 
     * @type {Array<GenericTestQuestions>}
     * @memberof GenericTest
     */
    questions: Array<GenericTestQuestions>;
}
/**
 * The answers to a generic test
 * @export
 * @interface GenericTestAnswers
 */
export interface GenericTestAnswers {
    /**
     * the id of the account that performed this test
     * @type {string}
     * @memberof GenericTestAnswers
     */
    accountID?: string;
    /**
     * the array of answers for this questionnaire
     * @type {Array<AnswerToQuestion>}
     * @memberof GenericTestAnswers
     */
    answers?: Array<AnswerToQuestion>;
}
/**
 * 
 * @export
 * @interface GenericTestQuestions
 */
export interface GenericTestQuestions {
    /**
     * 
     * @type {string}
     * @memberof GenericTestQuestions
     */
    question?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericTestQuestions
     */
    questionType?: GenericTestQuestionsQuestionTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericTestQuestions
     */
    answers?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum GenericTestQuestionsQuestionTypeEnum {
    OpenQuestion = 'openQuestion',
    MultipleChoice = 'multipleChoice',
    Slider = 'slider'
}

/**
 * response to provide account details
 * @export
 * @interface GetAccountIdResponse
 */
export interface GetAccountIdResponse {
    /**
     * The id of the account
     * @type {string}
     * @memberof GetAccountIdResponse
     */
    ID: string;
    /**
     * the name of the account
     * @type {string}
     * @memberof GetAccountIdResponse
     */
    Name: string;
    /**
     * the email address of the account
     * @type {string}
     * @memberof GetAccountIdResponse
     */
    Email: string;
}
/**
 * the account details provided when the user logs in as a JWT token
 * @export
 * @interface JWTAccountDetails
 */
export interface JWTAccountDetails {
    /**
     * The jwt token with all information.
     * @type {string}
     * @memberof JWTAccountDetails
     */
    JWT: string;
}
/**
 * 
 * @export
 * @interface LoginAccount
 */
export interface LoginAccount {
    /**
     * type of grant type to log in with
     * @type {string}
     * @memberof LoginAccount
     */
    grantType: LoginAccountGrantTypeEnum;
    /**
     * account email address to log in with
     * @type {string}
     * @memberof LoginAccount
     */
    emailAddress: string;
    /**
     * password of the account to log in with
     * @type {string}
     * @memberof LoginAccount
     */
    password?: string;
    /**
     * accesstoken of the account to log in with
     * @type {string}
     * @memberof LoginAccount
     */
    accessToken?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LoginAccountGrantTypeEnum {
    Password = 'password',
    AutenthicationToken = 'autenthicationToken'
}

/**
 * schema to revoke access with the specific account
 * @export
 * @interface LogoutAccount
 */
export interface LogoutAccount {
    /**
     * access token that needs to be revoked to log out
     * @type {string}
     * @memberof LogoutAccount
     */
    accessToken: string;
}
/**
 * a project object
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * the id of a project
     * @type {string}
     * @memberof Project
     */
    projectID?: string;
    /**
     * the name of a project
     * @type {string}
     * @memberof Project
     */
    projectName?: string;
}
/**
 * response with the projects of a specific account
 * @export
 * @interface ProjectsAccountId
 */
export interface ProjectsAccountId {
    /**
     * an array with all projects
     * @type {Array<Project>}
     * @memberof ProjectsAccountId
     */
    projects?: Array<Project>;
}
/**
 * Details necessary to refresh the access token
 * @export
 * @interface RefreshDetails
 */
export interface RefreshDetails {
    /**
     * The account ID.
     * @type {string}
     * @memberof RefreshDetails
     */
    accountID: string;
    /**
     * the refreshToken used to update the acces token
     * @type {string}
     * @memberof RefreshDetails
     */
    refreshToken: string;
}
/**
 * schema for signing up
 * @export
 * @interface SignUp
 */
export interface SignUp {
    /**
     * account id of the account that invites the new user
     * @type {string}
     * @memberof SignUp
     */
    senderAccountID: string;
    /**
     * the email address of the newly invited person
     * @type {string}
     * @memberof SignUp
     */
    emailAddress: string;
}
/**
 * test to perform
 * @export
 * @interface Test
 */
export interface Test {
    /**
     * id of the test
     * @type {string}
     * @memberof Test
     */
    testID?: string;
    /**
     * name of the test
     * @type {string}
     * @memberof Test
     */
    testName?: string;
    /**
     * type of the test
     * @type {string}
     * @memberof Test
     */
    testType?: TestTestTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TestTestTypeEnum {
    Generic = 'generic',
    StroopDirection = 'stroopDirection',
    StroopColor = 'stroopColor'
}

/**
 * tests that the account needs to perform for this specific project
 * @export
 * @interface TestsProject
 */
export interface TestsProject {
    /**
     * array of tests
     * @type {Array<Test>}
     * @memberof TestsProject
     */
    testsToPerform?: Array<Test>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new account
         * @param {AccountCreation} accountCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount: async (accountCreation: AccountCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCreation' is not null or undefined
            if (accountCreation === null || accountCreation === undefined) {
                throw new RequiredError('accountCreation','Required parameter accountCreation was null or undefined when calling createNewAccount.');
            }
            const localVarPath = `/signup/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof accountCreation !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(accountCreation !== undefined ? accountCreation : {})
                : (accountCreation || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the account with this ID
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountByID: async (accountID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new RequiredError('accountID','Required parameter accountID was null or undefined when calling deleteAccountByID.');
            }
            const localVarPath = `/accounts/{accountID}`
                .replace(`{${"accountID"}}`, encodeURIComponent(String(accountID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an account by ID
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByID: async (accountID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new RequiredError('accountID','Required parameter accountID was null or undefined when calling getAccountByID.');
            }
            const localVarPath = `/accounts/{accountID}`
                .replace(`{${"accountID"}}`, encodeURIComponent(String(accountID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a generic test with specific ID
         * @param {string} projectID The ID of the project to return
         * @param {string} testID The ID of the test to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenericTestOfProject: async (projectID: string, testID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling getGenericTestOfProject.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling getGenericTestOfProject.');
            }
            const localVarPath = `/projects/{projectID}/genericTests/{testID}`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * returns all projects where this account is involved in
         * @param {string} accountID The ID of the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsOfAccount: async (accountID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new RequiredError('accountID','Required parameter accountID was null or undefined when calling getProjectsOfAccount.');
            }
            const localVarPath = `/accounts/{accountID}/projects`
                .replace(`{${"accountID"}}`, encodeURIComponent(String(accountID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all tests that need to be performed by account
         * @param {string} projectID The ID of the project to return (UUID)
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsToPerformByAccount: async (projectID: string, accountID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling getTestsToPerformByAccount.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new RequiredError('accountID','Required parameter accountID was null or undefined when calling getTestsToPerformByAccount.');
            }
            const localVarPath = `/projects/{projectID}/{accountID}/tests`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"accountID"}}`, encodeURIComponent(String(accountID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * logging in the account
         * @param {LoginAccount} loginAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logInWithAccount: async (loginAccount: LoginAccount, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginAccount' is not null or undefined
            if (loginAccount === null || loginAccount === undefined) {
                throw new RequiredError('loginAccount','Required parameter loginAccount was null or undefined when calling logInWithAccount.');
            }
            const localVarPath = `/authentication/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof loginAccount !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(loginAccount !== undefined ? loginAccount : {})
                : (loginAccount || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * logging out the account
         * @param {LogoutAccount} logoutAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutWithAccount: async (logoutAccount: LogoutAccount, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutAccount' is not null or undefined
            if (logoutAccount === null || logoutAccount === undefined) {
                throw new RequiredError('logoutAccount','Required parameter logoutAccount was null or undefined when calling logOutWithAccount.');
            }
            const localVarPath = `/authentication/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof logoutAccount !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(logoutAccount !== undefined ? logoutAccount : {})
                : (logoutAccount || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh the access token of the account
         * @param {RefreshDetails} refreshDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken: async (refreshDetails: RefreshDetails, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDetails' is not null or undefined
            if (refreshDetails === null || refreshDetails === undefined) {
                throw new RequiredError('refreshDetails','Required parameter refreshDetails was null or undefined when calling refreshAccessToken.');
            }
            const localVarPath = `/authentication/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof refreshDetails !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(refreshDetails !== undefined ? refreshDetails : {})
                : (refreshDetails || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an email address that needs to be signed up
         * @param {SignUp} signUp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailForSignUp: async (signUp: SignUp, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUp' is not null or undefined
            if (signUp === null || signUp === undefined) {
                throw new RequiredError('signUp','Required parameter signUp was null or undefined when calling sendEmailForSignUp.');
            }
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof signUp !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(signUp !== undefined ? signUp : {})
                : (signUp || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit the answer to the specific
         * @param {string} projectID The ID of the project to return
         * @param {string} testID The ID of the test to return (UUID)
         * @param {GenericTestAnswers} genericTestAnswers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAnswerToTest: async (projectID: string, testID: string, genericTestAnswers: GenericTestAnswers, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling submitAnswerToTest.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling submitAnswerToTest.');
            }
            // verify required parameter 'genericTestAnswers' is not null or undefined
            if (genericTestAnswers === null || genericTestAnswers === undefined) {
                throw new RequiredError('genericTestAnswers','Required parameter genericTestAnswers was null or undefined when calling submitAnswerToTest.');
            }
            const localVarPath = `/projects/{projectID}/genericTests/{testID}`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof genericTestAnswers !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(genericTestAnswers !== undefined ? genericTestAnswers : {})
                : (genericTestAnswers || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new account
         * @param {AccountCreation} accountCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAccount(accountCreation: AccountCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createNewAccount(accountCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the account with this ID
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountByID(accountID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteAccountByID(accountID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an account by ID
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountByID(accountID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountIdResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getAccountByID(accountID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a generic test with specific ID
         * @param {string} projectID The ID of the project to return
         * @param {string} testID The ID of the test to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenericTestOfProject(projectID: string, testID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericTest>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getGenericTestOfProject(projectID, testID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * returns all projects where this account is involved in
         * @param {string} accountID The ID of the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsOfAccount(accountID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsAccountId>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProjectsOfAccount(accountID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all tests that need to be performed by account
         * @param {string} projectID The ID of the project to return (UUID)
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsToPerformByAccount(projectID: string, accountID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestsProject>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTestsToPerformByAccount(projectID, accountID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * logging in the account
         * @param {LoginAccount} loginAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logInWithAccount(loginAccount: LoginAccount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDetails>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).logInWithAccount(loginAccount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * logging out the account
         * @param {LogoutAccount} logoutAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logOutWithAccount(logoutAccount: LogoutAccount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).logOutWithAccount(logoutAccount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refresh the access token of the account
         * @param {RefreshDetails} refreshDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshAccessToken(refreshDetails: RefreshDetails, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTAccountDetails>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).refreshAccessToken(refreshDetails, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sends an email address that needs to be signed up
         * @param {SignUp} signUp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailForSignUp(signUp: SignUp, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sendEmailForSignUp(signUp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Submit the answer to the specific
         * @param {string} projectID The ID of the project to return
         * @param {string} testID The ID of the test to return (UUID)
         * @param {GenericTestAnswers} genericTestAnswers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitAnswerToTest(projectID: string, testID: string, genericTestAnswers: GenericTestAnswers, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).submitAnswerToTest(projectID, testID, genericTestAnswers, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new account
         * @param {AccountCreation} accountCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount(accountCreation: AccountCreation, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createNewAccount(accountCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the account with this ID
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountByID(accountID: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteAccountByID(accountID, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an account by ID
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByID(accountID: string, options?: any): AxiosPromise<GetAccountIdResponse> {
            return DefaultApiFp(configuration).getAccountByID(accountID, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a generic test with specific ID
         * @param {string} projectID The ID of the project to return
         * @param {string} testID The ID of the test to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenericTestOfProject(projectID: string, testID: string, options?: any): AxiosPromise<GenericTest> {
            return DefaultApiFp(configuration).getGenericTestOfProject(projectID, testID, options).then((request) => request(axios, basePath));
        },
        /**
         * returns all projects where this account is involved in
         * @param {string} accountID The ID of the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsOfAccount(accountID: string, options?: any): AxiosPromise<ProjectsAccountId> {
            return DefaultApiFp(configuration).getProjectsOfAccount(accountID, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all tests that need to be performed by account
         * @param {string} projectID The ID of the project to return (UUID)
         * @param {string} accountID The ID of the account to return (UUID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsToPerformByAccount(projectID: string, accountID: string, options?: any): AxiosPromise<TestsProject> {
            return DefaultApiFp(configuration).getTestsToPerformByAccount(projectID, accountID, options).then((request) => request(axios, basePath));
        },
        /**
         * logging in the account
         * @param {LoginAccount} loginAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logInWithAccount(loginAccount: LoginAccount, options?: any): AxiosPromise<AccountDetails> {
            return DefaultApiFp(configuration).logInWithAccount(loginAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * logging out the account
         * @param {LogoutAccount} logoutAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutWithAccount(logoutAccount: LogoutAccount, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).logOutWithAccount(logoutAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh the access token of the account
         * @param {RefreshDetails} refreshDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken(refreshDetails: RefreshDetails, options?: any): AxiosPromise<JWTAccountDetails> {
            return DefaultApiFp(configuration).refreshAccessToken(refreshDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an email address that needs to be signed up
         * @param {SignUp} signUp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailForSignUp(signUp: SignUp, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).sendEmailForSignUp(signUp, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit the answer to the specific
         * @param {string} projectID The ID of the project to return
         * @param {string} testID The ID of the test to return (UUID)
         * @param {GenericTestAnswers} genericTestAnswers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAnswerToTest(projectID: string, testID: string, genericTestAnswers: GenericTestAnswers, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).submitAnswerToTest(projectID, testID, genericTestAnswers, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new account
     * @param {AccountCreation} accountCreation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createNewAccount(accountCreation: AccountCreation, options?: any) {
        return DefaultApiFp(this.configuration).createNewAccount(accountCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the account with this ID
     * @param {string} accountID The ID of the account to return (UUID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAccountByID(accountID: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteAccountByID(accountID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an account by ID
     * @param {string} accountID The ID of the account to return (UUID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccountByID(accountID: string, options?: any) {
        return DefaultApiFp(this.configuration).getAccountByID(accountID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a generic test with specific ID
     * @param {string} projectID The ID of the project to return
     * @param {string} testID The ID of the test to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGenericTestOfProject(projectID: string, testID: string, options?: any) {
        return DefaultApiFp(this.configuration).getGenericTestOfProject(projectID, testID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * returns all projects where this account is involved in
     * @param {string} accountID The ID of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsOfAccount(accountID: string, options?: any) {
        return DefaultApiFp(this.configuration).getProjectsOfAccount(accountID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all tests that need to be performed by account
     * @param {string} projectID The ID of the project to return (UUID)
     * @param {string} accountID The ID of the account to return (UUID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTestsToPerformByAccount(projectID: string, accountID: string, options?: any) {
        return DefaultApiFp(this.configuration).getTestsToPerformByAccount(projectID, accountID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * logging in the account
     * @param {LoginAccount} loginAccount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logInWithAccount(loginAccount: LoginAccount, options?: any) {
        return DefaultApiFp(this.configuration).logInWithAccount(loginAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * logging out the account
     * @param {LogoutAccount} logoutAccount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logOutWithAccount(logoutAccount: LogoutAccount, options?: any) {
        return DefaultApiFp(this.configuration).logOutWithAccount(logoutAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh the access token of the account
     * @param {RefreshDetails} refreshDetails 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshAccessToken(refreshDetails: RefreshDetails, options?: any) {
        return DefaultApiFp(this.configuration).refreshAccessToken(refreshDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an email address that needs to be signed up
     * @param {SignUp} signUp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendEmailForSignUp(signUp: SignUp, options?: any) {
        return DefaultApiFp(this.configuration).sendEmailForSignUp(signUp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit the answer to the specific
     * @param {string} projectID The ID of the project to return
     * @param {string} testID The ID of the test to return (UUID)
     * @param {GenericTestAnswers} genericTestAnswers 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitAnswerToTest(projectID: string, testID: string, genericTestAnswers: GenericTestAnswers, options?: any) {
        return DefaultApiFp(this.configuration).submitAnswerToTest(projectID, testID, genericTestAnswers, options).then((request) => request(this.axios, this.basePath));
    }
}


